#!/usr/bin/env python

import collections
import logging
import json
import sys
import os

import vanilla


class Commits(object):
    def __init__(self, hub):
        self.broadcast = hub.broadcast()
        self.recent = collections.deque()

    def send(self, commit):
        print commit
        self.recent.append(commit)
        if len(self.recent) > 10:
            self.recent.popleft()
        self.broadcast.send(commit)

    def since(self, stamp):
        for commit in self.recent:
            if stamp < commit['pushed_at']:
                yield commit


def main():
    logging.basicConfig(level=logging.DEBUG)

    print 'starting...'
    h = vanilla.Hub()

    commits = Commits(h)

    app = h.http.bean(
        host='0.0.0.0',
        port=8000,
        base_path=os.path.join(os.path.dirname(__file__)))

    app.static('/', 'index.html')

    @app.post('/webhook')
    def _(request, response):
        data = request.consume()
        data = json.loads(data)

        if 'commits' in data:
            for commit in data['commits']:
                commits.send({
                    'username': commit['author']['username'],
                    'message': commit['message'],
                    'url': commit['url'],
                    'pushed_at': data['repository']['pushed_at'], })

        return 'OK'

    @app.websocket('/')
    def _(ws):
        updates = None

        try:
            since = int(ws.recv())
            print since
            updates = commits.broadcast.subscribe()
            for commit in commits.since(since):
                ws.send(json.dumps(commit))

            while True:
                # TODO: this bit of the API is a work in progress
                ch, data = h.select([ws.recver, updates])
                if ch == updates:
                    ws.send(json.dumps(data))

        except vanilla.Halt:
            if updates:
                updates.close()
            return

    h.stop_on_term()
    print 'shutdown.'


if __name__ == '__main__':
    sys.exit(main())
